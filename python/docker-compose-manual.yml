services:

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  
  flask-app:
    build: .
    container_name: flask-app
    restart: unless-stopped
    hostname: flask-app
    networks:
      - otel-network
    ports:
      - '5000:5000'
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=flask-app
      - OTEL_SERVICE_VERSION=1.0.0'
    volumes:
      - $HOME/.aws/:/root/.aws/:ro
    depends_on:
      - otel-collector
  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc
    depends_on:
      - init
  
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    hostname: loki
    networks:
      - otel-network
    ports:
      - '3100:3100'
    volumes:
      - ./configs/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    restart: unless-stopped
    hostname: otel-collector
    networks:
      - otel-network
    ports:
      - '4317:4317'   # OTLP gRPC receiver
      - '4318:4318'   # OTLP HTTP receiver
      - '8888:8888'   # Prometheus metrics exposed by the collector
      - '8889:8889'   # Prometheus exporter metrics
      - '55679:55679' # zpages
    volumes:
      - ./configs/otel-collector-config.yml:/etc/otel-collector-config.yaml
    command: ['--config=/etc/otel-collector-config.yaml']
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    hostname: prometheus
    networks:
      - otel-network
    ports:
      - '9090:9090'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - otel-collector
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: unless-stopped
    hostname: grafana
    networks:
      - otel-network
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
volumes:
  grafana-storage: {}

networks:
  otel-network:
    driver: bridge